name: Deploy to VM via Docker Swarm

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug - List files
        run: ls -la

      - name: Prepare remote directory
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          port: ${{ secrets.VM_PORT }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            mkdir -p /home/nrocha/academianovit-chall
            rm -rf /home/nrocha/academianovit-chall/*

      - name: Copy files to server
        run: |
          set -e
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/private_key
          chmod 600 /tmp/private_key

          # Copia todos los .yml/.yaml/.conf y el docker-compose
          scp -i /tmp/private_key -P ${{ secrets.VM_PORT }} -o StrictHostKeyChecking=no \
            -r provisioning *.yml *.yaml *.conf \
            ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/nrocha/academianovit-chall/

          rm /tmp/private_key

      - name: Verify copied files
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          port: ${{ secrets.VM_PORT }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            ls -la /home/nrocha/academianovit-chall/

      - name: Create Grafana SMTP secrets in Swarm
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          port: ${{ secrets.VM_PORT }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            # Crear secret grafana_smtp_user si no existe
            if ! docker secret ls --format '{{.Name}}' | grep -q '^grafana_smtp_user$'; then
              echo "${{ secrets.DEBUGEMAIL_USER }}" | docker secret create grafana_smtp_user -
              echo "‚úÖ Secret grafana_smtp_user creado"
            else
              echo "‚ÑπÔ∏è Secret grafana_smtp_user ya existe"
            fi

            # Crear secret grafana_smtp_password si no existe
            if ! docker secret ls --format '{{.Name}}' | grep -q '^grafana_smtp_password$'; then
              echo "${{ secrets.DEBUGEMAIL_PASS }}" | docker secret create grafana_smtp_password -
              echo "‚úÖ Secret grafana_smtp_password creado"
            else
              echo "‚ÑπÔ∏è Secret grafana_smtp_password ya existe"
            fi

      - name: Run setup and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          port: ${{ secrets.VM_PORT }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "=== Moviendo archivos de configuraci√≥n a /tmp ==="
            rm -f /tmp/*.yml /tmp/*.yaml /tmp/*.conf
            rm -rf /tmp/provisioning || true

            cp /home/nrocha/academianovit-chall/prometheus.yml /tmp/
            cp /home/nrocha/academianovit-chall/alert.rules.yml /tmp/
            cp /home/nrocha/academianovit-chall/loki-config.yaml /tmp/
            cp /home/nrocha/academianovit-chall/promtail-config.yaml /tmp/
            cp /home/nrocha/academianovit-chall/nginx.conf /tmp/
            cp -r /home/nrocha/academianovit-chall/provisioning /tmp/

            echo "=== Asegurando vol√∫menes para Loki ==="
            docker volume rm -f academia2025_loki_data academia2025_loki_wal || true
            docker volume create --name academia2025_loki_data
            docker run --rm -v academia2025_loki_data:/loki alpine chown -R 10001:0 /loki

            echo "=== Ejecutando setup_env.sh ==="
            bash /home/nrocha/scripts/setup_env.sh

            echo "=== Login en GHCR y despliegue ==="
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ghcr.io/nahuelrocha/academia2025-challenge:latest
            docker stack deploy -c /home/nrocha/academianovit-chall/docker-compose.prod.yml academia2025

      - name: Verify services health
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          port: ${{ secrets.VM_PORT }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            STACK=academia2025
            SERVICES=(postgres postgres-exporter api nginx prometheus node-exporter cadvisor grafana loki promtail)

            for svc in "${SERVICES[@]}"; do
              FULL_NAME="${STACK}_${svc}"
              echo "üîπ Verificando servicio $FULL_NAME..."
              TIMEOUT=120
              ELAPSED=0
              INTERVAL=5

              while true; do
                STATE=$(docker service ps "$FULL_NAME" --filter 'desired-state=running' --format '{{.CurrentState}}')
                if echo "$STATE" | grep -q "Running"; then
                  echo "‚úÖ $FULL_NAME est√° corriendo"
                  break
                fi
                if [ $ELAPSED -ge $TIMEOUT ]; then
                  echo "‚ùå Timeout alcanzado para $FULL_NAME"
                  echo "=== Estado actual del servicio ==="
                  docker service ps "$FULL_NAME"
                  echo "=== Logs recientes ==="
                  docker service logs --tail 30 "$FULL_NAME" || true
                  echo "=== Inspect del servicio ==="
                  docker service inspect "$FULL_NAME" || true
                  exit 1
                fi
                sleep $INTERVAL
                ELAPSED=$((ELAPSED + INTERVAL))
              done
            done

      - name: Cleanup temporary files
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          port: ${{ secrets.VM_PORT }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            rm -f /tmp/*.yml /tmp/*.yaml /tmp/*.conf
            echo "‚úÖ Limpieza de archivos temporales completada"

      - name: Send deployment notification to Discord
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d '{"content":"‚úÖ Deployment completado correctamente en /home/nrocha/academianovit-chall/"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send failure notification to Discord
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d '{"content":"‚ùå Deployment fall√≥. Verifica los logs del workflow."}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
