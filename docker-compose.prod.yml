version: "3.8"

# Configuración de servicios para Docker Swarm
services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    environment:
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $$(cat /run/secrets/postgres_user) -d $$(cat /run/secrets/postgres_db)",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s
      resources:
        limits:
          cpus: "1.0"
          memory: 1024M
        reservations:
          cpus: "0.5"
          memory: 512M
      placement:
        constraints:
          - node.role == manager
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API de la aplicación
  api:
    image: ghcr.io/nahuelrocha/academia2025-challenge:latest
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
      - jwt_secret
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME_FILE: /run/secrets/postgres_db
      DB_USER_FILE: /run/secrets/postgres_user
      DB_PASSWORD_FILE: /run/secrets/postgres_password
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      TOKEN_EXPIRY_HOURS: 24
    networks:
      - backend
      - frontend
    depends_on:
      - postgres
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health/live",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        monitor: 60s
        max_failure_ratio: 0.3
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.api.rule=PathPrefix(`/api`) || Path(`/`) || Path(`/health`) || Path(`/health/live`) || Path(`/health/ready`)"
        - "traefik.http.services.api.loadbalancer.server.port=3000"
        - "traefik.docker.network=frontend"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Reverse Proxy Nginx
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx_config:/etc/nginx/conf.d
      - nginx_certs:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - frontend
    configs:
      - source: nginx_config
        target: /etc/nginx/conf.d/default.conf
    depends_on:
      - api
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/health/live",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 64M
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=false"
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:v2.45.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
      - "--web.route-prefix=/"
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    volumes:
      - prometheus_data:/prometheus
    networks:
      - backend
      - frontend
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s
      resources:
        limits:
          cpus: "1.0"
          memory: 1024M
        reservations:
          cpus: "0.25"
          memory: 512M
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.rule=PathPrefix(`/prometheus`)"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana para visualización
  grafana:
    image: grafana/grafana:10.0.0
    secrets:
      - grafana_admin_password
    environment:
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_admin_password
      GF_SERVER_ROOT_URL: http://localhost/grafana
      GF_SERVER_SERVE_FROM_SUB_PATH: true
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_AUTH_ANONYMOUS_ENABLED: false
      GF_SECURITY_ALLOW_EMBEDDING: true
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_provisioning:/etc/grafana/provisioning
    networks:
      - backend
      - frontend
    depends_on:
      - prometheus
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=PathPrefix(`/grafana`)"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Loki para logs
  loki:
    image: grafana/loki:2.8.0
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    networks:
      - backend
    configs:
      - source: loki_config
        target: /etc/loki/local-config.yaml
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3100/ready",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 256M
      placement:
        constraints:
          - node.role == manager
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Promtail para shipping de logs
  promtail:
    image: grafana/promtail:2.8.0
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - backend
    configs:
      - source: promtail_config
        target: /etc/promtail/config.yml
    depends_on:
      - loki
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
      resources:
        limits:
          cpus: "0.2"
          memory: 128M
        reservations:
          cpus: "0.05"
          memory: 32M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

# Redes overlay para Docker Swarm
networks:
  frontend:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"
  backend:
    driver: overlay
    driver_opts:
      encrypted: "true"

# Volúmenes persistentes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/academia2025/postgres
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/academia2025/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/academia2025/grafana
  grafana_provisioning:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/academia2025/grafana-provisioning
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/academia2025/loki
  nginx_config:
    driver: local
  nginx_certs:
    driver: local
  nginx_logs:
    driver: local

# Docker Secrets para credenciales
secrets:
  postgres_password:
    external: true
    name: academia2025_postgres_password
  postgres_user:
    external: true
    name: academia2025_postgres_user
  postgres_db:
    external: true
    name: academia2025_postgres_db
  jwt_secret:
    external: true
    name: academia2025_jwt_secret
  grafana_admin_password:
    external: true
    name: academia2025_grafana_admin_password

# Configuraciones externas
configs:
  nginx_config:
    external: true
    name: academia2025_nginx_config
  prometheus_config:
    external: true
    name: academia2025_prometheus_config
  loki_config:
    external: true
    name: academia2025_loki_config
  promtail_config:
    external: true
    name: academia2025_promtail_config
