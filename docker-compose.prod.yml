version: "3.8"

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    environment:
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $$(cat /run/secrets/postgres_user) -d $$(cat /run/secrets/postgres_db)",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "1.0"
          memory: 1024M
        reservations:
          cpus: "0.5"
          memory: 512M

  # PostgreSQL Exporter para Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.11.0
    networks:
      - backend
    depends_on:
      - postgres
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/challege_api?sslmode=disable"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.2"
          memory: 128M
        reservations:
          cpus: "0.1"
          memory: 64M

  # API de la aplicaci√≥n
  api:
    image: ghcr.io/nahuelrocha/academia2025-challenge:latest
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME_FILE: /run/secrets/postgres_db
      DB_USER_FILE: /run/secrets/postgres_user
      DB_PASSWORD_FILE: /run/secrets/postgres_password
      TOKEN_EXPIRY_HOURS: 24
    networks:
      - backend
      - frontend
    depends_on:
      - postgres
    deploy:
      replicas: 2

  # Reverse Proxy Nginx
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    configs:
      - source: nginx_config
        target: /etc/nginx/nginx.conf
    volumes:
      - nginx_certs:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - frontend
    depends_on:
      - api

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
      - "--web.external-url=/prometheus/"
      - "--web.route-prefix=/"
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_alert_rules
        target: /etc/prometheus/alert.rules.yml
    volumes:
      - prometheus_data:/prometheus
    networks:
      - backend
      - frontend
    depends_on:
      - node-exporter
      - cadvisor
      - postgres-exporter

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:v1.6.0
    networks:
      - backend
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
    deploy:
      mode: global

  # cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    networks:
      - backend
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    deploy:
      mode: global

  # Grafana
  grafana:
    image: grafana/grafana:10.0.0
    secrets:
      - grafana_admin_password
    environment:
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_admin_password
      GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_provisioning:/etc/grafana/provisioning
    networks:
      - backend
      - frontend
    depends_on:
      - prometheus

  # Loki
  loki:
    image: grafana/loki:2.8.0
    command: ["-config.file=/etc/loki/loki-config.yaml"]
    user: "10001:0"
    volumes:
      - loki_data:/loki
    networks:
      - backend
    configs:
      - source: loki_config
        target: /etc/loki/loki-config.yaml
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Promtail
  promtail:
    image: grafana/promtail:2.8.0
    command: -config.file=/etc/promtail/promtail-config.yaml
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - backend
    configs:
      - source: promtail_config
        target: /etc/promtail/promtail-config.yaml
    depends_on:
      - loki

networks:
  frontend:
    driver: overlay
    attachable: true
  backend:
    driver: overlay

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  grafana_provisioning:
  loki_data:
  nginx_config:
  nginx_certs:
  nginx_logs:

secrets:
  postgres_password:
    external: true
  postgres_user:
    external: true
  postgres_db:
    external: true
  grafana_admin_password:
    external: true

configs:
  nginx_config:
    external: true
  prometheus_config:
    external: true
  prometheus_alert_rules:
    external: true
  loki_config:
    external: true
  promtail_config:
    external: true
